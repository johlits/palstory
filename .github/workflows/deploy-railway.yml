name: Deploy to Railway

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (for Railway CLI)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Railway CLI
        run: npm i -g @railway/cli

      - name: Validate Railway secrets
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          set -euo pipefail
          if [ -z "${RAILWAY_TOKEN:-}" ]; then
            echo "RAILWAY_TOKEN is not set. Create a Railway API token (Railway Dashboard -> Account -> Generate Token) and add it as a Repository Secret named RAILWAY_TOKEN." >&2
            exit 1
          fi

      - name: Deploy via Railway CLI (from palstory-web/)
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT: ${{ secrets.RAILWAY_PROJECT }}
          RAILWAY_SERVICE: ${{ secrets.RAILWAY_SERVICE }}
        working-directory: palstory-web
        run: |
          set -euo pipefail
          # If project/service are provided as secrets, use them explicitly. Otherwise, rely on pre-linked project.
          PROJECT_ARG=""; SERVICE_ARG=""
          if [ -n "${RAILWAY_PROJECT:-}" ]; then PROJECT_ARG="--project \"$RAILWAY_PROJECT\""; fi
          if [ -n "${RAILWAY_SERVICE:-}" ]; then SERVICE_ARG="--service \"$RAILWAY_SERVICE\""; fi

          # Quick auth check (whoami)
          railway whoami || { echo "Railway auth failed. Check RAILWAY_TOKEN secret." >&2; exit 1; }

          # 'railway up' builds from the current folder (palstory-web/) using its Dockerfile and deploys the service
          bash -lc "railway up $PROJECT_ARG $SERVICE_ARG --detach"
